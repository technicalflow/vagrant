# -*- mode: ruby -*-/Users/marek/.vagrant.d/Vagrantfile
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

# Increase numworkers if you want more than 3 nodes
numworkers = 1

# VirtualBox settings
# Increase vmmemory if you want more than 512mb memory in the vm's
# Increase numcpu if you want more cpu's per vm
vmmemory = 2048
numcpu = 2

instances = []

(1..numworkers).each do |n| 
  instances.push({:name => "lxdw#{n}", :ip => "192.168.80.#{n+2}"})
end

manager_ip = "192.168.80.2"
manager_hostname = "lxdm"

File.open("./hosts", 'w') { |file| 
  instances.each do |i|
    file.write("#{i[:ip]} #{i[:name]} #{i[:name]}\n")
  end
}

Vagrant.configure("2") do |config|
   config.vm.define "lxdm" do |i|
    i.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--audio", "none"]
        v.customize ["modifyvm", :id, "--boot1", "disk"]
        v.customize ["modifyvm", :id, "--boot2", "none"]
        v.customize ["modifyvm", :id, "--boot3", "none"]
        v.customize ["modifyvm", :id, "--vram",  "16"]
        v.customize ["modifyvm", :id, "--graphicscontroller", "none"]
        v.customize ["modifyvm", :id, "--vrde",  "off"]
        v.memory = vmmemory
        v.cpus = numcpu
        v.name = "#{manager_hostname}"
    end
      i.vm.box = "ubuntu/focal64"
      i.vm.hostname = "#{manager_hostname}"
      i.vm.network "private_network", ip: "#{manager_ip}"
#      i.vm.network "forwarded_port", guest: 80, host: 9080
#      i.vm.network "forwarded_port", guest: 443, host: 9443
#      i.vm.network "forwarded_port", guest: 8443, host: 9443

#      i.vm.network "public_network", bridge: "enp0s10", ip: "192.168.50.59", auto_config: true ###FOR LINUX EXTERNAL NETWORK
      i.vm.network "public_network", bridge: "en0: Wi-Fi", ip: "192.168.50.59", auto_config: true ###FOR MAC EXTERNAL NETWORK

      if File.file?("./hosts") 
        i.vm.provision "file", source: "hosts", destination: "/tmp/hosts"
        i.vm.provision "shell", inline: "cat /tmp/hosts >> /etc/hosts", privileged: true
      end

#      i.vbguest.auto_update = false

      i.vm.provision "shell", inline: "mkdir -p /home/vagrant/.ssh/"
      i.vm.provision "file", source: "../ansible/ansible.pub", destination: "/home/vagrant/.ssh/ansible.pub"
      i.vm.provision "shell", inline: "cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys"

      i.vm.provision "shell", path: "./provision.sh", run: "once"

      i.vm.provision :ansible do |ansible|
        ansible.verbose = "vv"
        ansible.extra_vars = { "ansible_python_interpreter" => "/usr/bin/python3" }
        ansible.playbook = "../ansible/playbook.yml"
  
     i.vm.provision "shell", inline: <<-SHELL
          cat /etc/os-release
          ip a | grep en
      SHELL
      end
end

instances.each do |instance|

  config.vm.define instance[:name] do |w|
      w.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--audio", "none"]
        vb.customize ["modifyvm", :id, "--boot1", "disk"]
        vb.customize ["modifyvm", :id, "--boot2", "none"]
        vb.customize ["modifyvm", :id, "--boot3", "none"]
        vb.customize ["modifyvm", :id, "--vram",  "16"]
        vb.customize ["modifyvm", :id, "--graphicscontroller", "none"]
        vb.customize ["modifyvm", :id, "--vrde",  "off"]
        vb.memory = 1024
        vb.cpus = 2
        vb.name = "#{instance[:name]}"
      end
      w.vm.box = "ubuntu/focal64"
      w.vm.hostname = instance[:name]
      w.vm.network "private_network", ip: "#{instance[:ip]}"
      w.vm.network "forwarded_port", guest: 80, host: 9080

      if File.file?("./hosts") 
        w.vm.provision "file", source: "hosts", destination: "/tmp/hosts"
        w.vm.provision "shell", inline: "cat /tmp/hosts >> /etc/hosts", privileged: true
      end

#      w.vbguest.auto_update = false

      w.vm.provision "shell", inline: "mkdir -p /home/vagrant/.ssh/"
      w.vm.provision "file", source: "../ansible/ansible.pub", destination: "/home/vagrant/.ssh/ansible.pub"
      w.vm.provision "shell", inline: "cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys"

      w.vm.provision :ansible do |ansible|
        ansible.verbose = "vv"
        ansible.extra_vars = { "ansible_python_interpreter" => "/usr/bin/python3" }
        ansible.playbook = "../ansible/playbook.yml"
        
      w.vm.provision "shell", path: "./provision.sh", run: "once"

      w.vm.provision "shell", inline: <<-SHELL                                                              
          cat /etc/hostname
      SHELL
       end
      end
end
end
